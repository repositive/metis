"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const test = require("tape");
const sinon_1 = require("sinon");
const _1 = require(".");
const _2 = require(".");
test('toPromise', (t) => {
    const f = (n) => 1 + n;
    const fp = _1.toPromise(f);
    t.equals(typeof fp, 'function', 'It returns a function');
    const result = fp(1);
    console.log(result);
    t.ok(result instanceof Promise, 'When called returns a promise');
    result
        .then(r => {
        t.equals(f(1), r, 'The promise resolves in the expected return from the function promisified');
        t.end();
    })
        .catch(console.error);
});
test('Do not break the interface', (t) => {
    const backend = {
        request: sinon_1.stub().returns(Promise.resolve(Buffer.from('2'))),
        register: sinon_1.stub().returns(Promise.resolve())
    };
    const _IrisAMQP = sinon_1.stub().returns(Promise.resolve(backend));
    function _test() {
        return __awaiter(this, void 0, void 0, function* () {
            const irisP = _2.default({ _IrisAMQP });
            t.ok(irisP instanceof Promise, 'The setup returns a Promise');
            const { request, register } = yield irisP;
            const response = yield request({ pattern: '' });
            t.equals(response, 2, 'The response is parsed with JSON.parse');
            const bReqCall = backend.request.getCall(0);
            t.deepEquals(bReqCall.args[0], { pattern: '', payload: Buffer.alloc(0) }, 'Serializer preceeds the call to real backend');
            const handlerStub = sinon_1.stub().returns(Promise.resolve(1));
            yield register({ pattern: '', handler: handlerStub });
            const bRegCall = backend.register.getCall(0);
            const composedHandler = bRegCall.args[0].handler;
            const randomR = Math.random();
            const handR = yield composedHandler({ payload: Buffer.from(`${randomR}`) });
            t.deepEqual(handR, Buffer.from('1'), 'The response from the handler is serialized to a Buffer');
            const handCall = handlerStub.getCall(0);
            t.equals(handCall.args[0].payload, randomR, 'Handler is called with the parsed payload');
        });
    }
    _test().then(() => t.end()).catch(console.error);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSw2QkFBNkI7QUFFN0IsaUNBQWtDO0FBQ2xDLHdCQUE4QjtBQUM5Qix3QkFBMEI7QUFFMUIsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQU87SUFDeEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFTLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMvQixNQUFNLEVBQUUsR0FBRyxZQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsRUFBRSxVQUFVLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztJQUN6RCxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNwQixDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sWUFBWSxPQUFPLEVBQUUsK0JBQStCLENBQUMsQ0FBQztJQUNqRSxNQUFNO1NBQ0gsSUFBSSxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsMkVBQTJFLENBQUMsQ0FBQztRQUMvRixDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDVixDQUFDLENBQUM7U0FDRCxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzFCLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLDRCQUE0QixFQUFFLENBQUMsQ0FBTztJQUN6QyxNQUFNLE9BQU8sR0FBRztRQUNkLE9BQU8sRUFBRSxZQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7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