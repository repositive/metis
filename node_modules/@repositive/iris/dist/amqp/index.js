"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const amqplib_1 = require("amqplib");
const register_1 = require("./register");
const request_1 = require("./request");
function restartConnection({ opts, timeout = 100, attempt = 0, _setup = setup, _setTimeout = setTimeout }) {
    return new Promise((resolve, reject) => {
        const _log = opts._log || console;
        const _restartConnection = opts._restartConnection || restartConnection;
        _log.info(`Retrying connection in ${attempt * timeout}ms`);
        _setTimeout(() => {
            resolve(_setup(opts).catch((innerErr) => {
                return _restartConnection({ opts, timeout, _setup, attempt: attempt <= 100 ? attempt + 10 : attempt });
            }));
        }, attempt * timeout);
    });
}
exports.restartConnection = restartConnection;
const defaults = {
    uri: 'amqp://guest:guest@localhost',
    exchange: 'iris',
    namespace: 'default',
    registrations: {},
    _setupRequest: request_1.setupRequest,
    _setupRegister: register_1.setupRegister,
    _connect: amqplib_1.connect,
    _restartConnection: restartConnection,
    _log: console
};
function setup(opts = defaults) {
    return __awaiter(this, void 0, void 0, function* () {
        const _opts = Object.assign({}, defaults, opts);
        const { uri, exchange, registrations, _setupRequest, _setupRegister, _connect, _restartConnection, _log } = _opts;
        const common_options = { durable: true, noAck: true };
        const conn = yield _connect(uri, common_options);
        const channel = yield conn.createChannel();
        const options = Object.assign({ ch: channel }, _opts);
        const operations = yield Promise.all([
            _setupRequest(options),
            _setupRegister(options)
        ]);
        let errored = false;
        function onError(error) {
            if (!errored) {
                errored = true;
                _log.warn(`Connection errored...`);
                _restartConnection({ opts: _opts }).then(({ register, request }) => {
                    operations[0] = request;
                    operations[1] = register;
                    errored = false;
                    _log.info('Connection recovered');
                })
                    .catch((err) => {
                    _log.error(err);
                    /* This promise should never reject */
                });
            }
        }
        conn.on('error', onError);
        conn.on('close', onError);
        // If the connection failed there may be subscriptions from previous connection, so add them again.
        yield Promise.all(Object.keys(registrations).map(k => {
            const registration = registrations[k];
            return operations[1](registration);
        }));
        return {
            register(ropts) {
                return __awaiter(this, void 0, void 0, function* () {
                    const id = `${ropts.pattern}-${ropts.namespace || ''}`;
                    if (!registrations[id]) {
                        registrations[id] = ropts;
                    }
                    if (errored) {
                        return Promise.resolve();
                    }
                    else {
                        return operations[1](ropts);
                    }
                });
            },
            request(ropts) {
                return __awaiter(this, void 0, void 0, function* () {
                    if (errored) {
                        return Promise.reject(new Error('Broken pipe'));
                    }
                    else {
                        return operations[0](ropts);
                    }
                });
            }
        };
    });
}
exports.default = setup;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYW1xcC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEscUNBQXlDO0FBQ3pDLHlDQUEwRTtBQUMxRSx1Q0FBc0U7QUFldEUsMkJBQWtDLEVBQ2hDLElBQUksRUFDSixPQUFPLEdBQUcsR0FBRyxFQUNiLE9BQU8sR0FBRyxDQUFDLEVBQ1gsTUFBTSxHQUFHLEtBQUssRUFDZCxXQUFXLEdBQUcsVUFBVSxFQU96QjtJQUNDLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNO1FBQ2pDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDO1FBQ2xDLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixJQUFJLGlCQUFpQixDQUFDO1FBRXhFLElBQUksQ0FBQyxJQUFJLENBQUMsMEJBQTBCLE9BQU8sR0FBRyxPQUFPLElBQUksQ0FBQyxDQUFDO1FBQzNELFdBQVcsQ0FDVDtZQUNFLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBZTtnQkFDekMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sSUFBSSxHQUFHLEdBQUcsT0FBTyxHQUFHLEVBQUUsR0FBRyxPQUFPLEVBQUMsQ0FBQyxDQUFDO1lBQ3ZHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDTixDQUFDLEVBQ0QsT0FBTyxHQUFHLE9BQU8sQ0FDbEIsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQTNCRCw4Q0EyQkM7QUFFRCxNQUFNLFFBQVEsR0FBRztJQUNmLEdBQUcsRUFBRSw4QkFBOEI7SUFDbkMsUUFBUSxFQUFFLE1BQU07SUFDaEIsU0FBUyxFQUFFLFNBQVM7SUFDcEIsYUFB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