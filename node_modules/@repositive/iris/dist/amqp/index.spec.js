"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const test = require("tape");
const sinon_1 = require("sinon");
const index_1 = require("./index");
const index_2 = require("./index");
const _restartConnection = sinon_1.spy();
function mockConnect() {
    return {
        createChannel: sinon_1.spy(),
        on: sinon_1.spy()
    };
}
function wait(time) {
    return new Promise((resolve, reject) => {
        setTimeout(() => resolve(), time);
    });
}
function mockOpts() {
    const connectResponse = mockConnect();
    const register = sinon_1.spy();
    const request = sinon_1.spy();
    const registrations = { 'test': { pattern: 'test', handler: sinon_1.spy() } };
    return {
        steps: {
            request,
            register,
            connectResponse
        },
        mocks: {
            uri: '',
            exchange: '',
            registrations,
            _setupRequest: sinon_1.stub().returns(Promise.resolve(request)),
            _setupRegister: sinon_1.stub().returns(Promise.resolve(register)),
            _restartConnection: sinon_1.stub().returns(Promise.resolve({ request, register })),
            _connect: sinon_1.stub().returns(Promise.resolve(connectResponse)),
            _log: { log: sinon_1.spy(), info: sinon_1.spy(), warn: sinon_1.spy(), error: sinon_1.spy() }
        }
    };
}
test('Test restartConnection', (t) => {
    const _setup = sinon_1.stub().returns(Promise.resolve());
    const opts = mockOpts();
    const _setTimeout = sinon_1.spy();
    const url = '';
    const exchange = '';
    const result = index_2.restartConnection({ opts: opts.mocks, _setup, _setTimeout });
    t.ok(result instanceof Promise, 'RestartConnection returns a promise');
    t.ok(_setTimeout.calledOnce, 'Set a timeout');
    t.notOk(opts.mocks._restartConnection.called, 'Do not iterate before timeout');
    t.notOk(_setup.called, 'Do not run setup before timeout');
    const timeoutCb = _setTimeout.getCall(0).args[0];
    timeoutCb();
    t.ok(_setup.calledOnce, 'Run setup un timeout');
    t.notOk(opts.mocks._restartConnection.called, 'Do not iterate if setup succeds');
    _setup.reset();
    _setup.returns(Promise.reject({}));
    timeoutCb();
    setTimeout(() => {
        t.ok(opts.mocks._restartConnection.calledOnce, 'Iterate if setup blows up on timeout');
        t.end();
    }, 0);
});
test('Tests setup funcion', (t) => {
    const opts = mockOpts();
    function test() {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield index_1.default(opts.mocks);
            t.ok(opts.steps.register.calledOnce, 'Add is being call for each one of the provided registrations');
            const passAddition = opts.steps.register.getCall(0).args[0];
            t.deepEqual(opts.mocks.registrations.test, passAddition, 'The subscription passed to register is the expected one');
            opts.steps.register.reset();
            yield result.register({ pattern: '', handler: sinon_1.spy() });
            t.ok(opts.steps.register.calledOnce, 'Returns an initialized register function');
            yield result.request({ pattern: '', payload: Buffer.from('{}') });
            t.ok(opts.steps.request.calledOnce, 'Returns an initialized act function');
            const on0 = opts.steps.connectResponse.on.getCall(0);
            const on1 = opts.steps.connectResponse.on.getCall(1);
            t.equals(on0 && on0.args[0], 'error', 'It adds a handler to connection error');
            t.equals(on1 && on1.args[0], 'close', 'It adds a handler to connection close');
            const register = sinon_1.spy();
            const request = sinon_1.spy();
            opts.mocks._restartConnection.returns(Promise.resolve({ request, register }));
            on0.args[1]();
            t.ok(opts.mocks._restartConnection.calledOnce, 'Restart connection is called on connection close');
            yield wait(0); // Wait for the connection to stablish again;
            yield result.register({ pattern: '', handler: sinon_1.spy() });
            t.ok(register.calledOnce, 'After successsfull restart register is reasigned');
            yield result.request({ pattern: '', payload: Buffer.from('') });
            t.ok(request.calledOnce, 'After successsfull restart act is reasigned');
            opts.mocks._restartConnection.returns(Promise.reject({}));
            on0.args[1]();
            yield result.register({ pattern: '', handler: sinon_1.spy() }).then(() => {
                t.ok(true, 'Subscribe works on errored library');
            });
            yield result.request({ pattern: '', payload: Buffer.alloc(0) })
                .then(() => {
                t.ok(false, 'Emit should fail on errored library');
            })
                .catch(err => {
                t.ok(true, 'Emit rejects the promise if the pipe is broken');
            });
        });
    }
    test()
        .then(() => t.end())
        .catch(console.error);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hbXFwL2luZGV4LnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLDZCQUE2QjtBQUU3QixpQ0FBa0M7QUFDbEMsbUNBQTJCO0FBQzNCLG1DQUE0QztBQUU1QyxNQUFNLGtCQUFrQixHQUFHLFdBQUcsRUFBRSxDQUFDO0FBRWpDO0lBQ0UsTUFBTSxDQUFDO1FBQ0wsYUFBYSxFQUFFLFdBQUcsRUFBRTtRQUNwQixFQUFFLEVBQUUsV0FBRyxFQUFFO0tBQ1YsQ0FBQztBQUNKLENBQUM7QUFFRCxjQUFjLElBQVk7SUFDeEIsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFPLENBQUMsT0FBTyxFQUFFLE1BQU07UUFDdkMsVUFBVSxDQUFDLE1BQU0sT0FBTyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDcEMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQ7SUFDRSxNQUFNLGVBQWUsR0FBRyxXQUFXLEVBQUUsQ0FBQztJQUN0QyxNQUFNLFFBQVEsR0FBRyxXQUFHLEVBQUUsQ0FBQztJQUN2QixNQUFNLE9BQU8sR0FBRyxXQUFHLEVBQUUsQ0FBQztJQUN0QixNQUFNLGFBQWEsR0FBRyxFQUFDLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFdBQUcsRUFBRSxFQUFDLEVBQUMsQ0FBQztJQUNsRSxNQUFNLENBQUM7UUFDTCxLQUFLLEVBQUU7WUFDTCxPQUFPO1lBQ1AsUUFBUTtZQUNSLGVBQWU7U0FDaEI7UUFDRCxLQUFLLEVBQUU7WUFDTCxHQUFHLEVBQUUsRUFBRTtZQUNQLFFBQVEsRUFBRSxFQUFFO1lBQ1osYUFBYTtZQUNiLGFBQWEsRUFBRSxZQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN2RCxjQUFjLEVBQUUsWUFBSSxFQUFFLENB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