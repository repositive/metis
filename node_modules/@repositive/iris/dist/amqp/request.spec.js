"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const test = require("tape");
const sinon_1 = require("sinon");
const request_1 = require("./request");
function mockChannel() {
    return {
        assertQueue: sinon_1.stub().returns({ queue: 'test' }),
        consume: sinon_1.spy(),
        sendToQueue: sinon_1.spy(),
        ack: sinon_1.spy(),
        publish: sinon_1.spy(),
        deleteQueue: sinon_1.stub().returns(Promise.resolve())
    };
}
function mockSerialization() {
    return {
        parse: sinon_1.stub().returns({}),
        serialize: sinon_1.stub().returns(Buffer.from('{}'))
    };
}
function wait(time) {
    return new Promise((resolve, reject) => {
        setTimeout(() => resolve(), time);
    });
}
test('Test request', (t) => {
    const ch = mockChannel();
    const exchange = '';
    function test() {
        return __awaiter(this, void 0, void 0, function* () {
            const pSetupRequest = request_1.setupRequest({ ch, exchange });
            t.ok(pSetupRequest instanceof Promise, 'Setup returns a promise');
            const request = yield pSetupRequest;
            const pattern = '';
            const payload = Buffer.from('');
            const pResult1 = request({ pattern, payload });
            t.ok(pResult1 instanceof Promise, 'Act returns a promise');
            yield pResult1
                .then(() => {
                t.notOk(true, 'Should not return if there was no response');
            })
                .catch(err => {
                t.ok(ch.deleteQueue.calledOnce, 'Deletes queue on timeout');
                t.equals(err && err.message, 'Timeout', 'Throws timeout if there is no response');
            });
            ch.publish.reset();
            ch.deleteQueue.reset();
            ch.consume.reset();
            const pResult2 = request({ pattern, payload });
            yield wait(0);
            const pCall = ch.publish.getCall(0);
            t.deepEquals(ch.publish.calledOnce && pCall.args[2], payload, 'Publishes the payload');
            const cCall = ch.consume.getCall(0);
            t.equals(ch.consume.calledOnce && ch.consume.getCall(0).args[0], 'test', 'Consumes the queue');
            const r = Math.random();
            const content = Buffer.from(JSON.stringify({ r }));
            const properties = pCall.args[3];
            properties.headers = { code: 0 };
            ch.consume.getCall(0).args[1]({ content, properties });
            yield pResult2
                .then((result) => {
                t.deepEquals(Buffer.from(JSON.stringify({ r })), result, 'On success get the expected result');
                t.ok(ch.deleteQueue.calledOnce, 'Deletes the queue on message received');
                t.ok(ch.ack.calledOnce, 'Acknowledges the message reception');
            })
                .catch((err) => {
                t.notOk(true, 'On success it should not reject');
            });
            ch.publish.reset();
            ch.deleteQueue.reset();
            ch.deleteQueue.returns(Promise.resolve());
            ch.consume.reset();
            ch.ack.reset();
            const pResult3 = request({ pattern, payload });
            yield wait(0);
            const errContent = Buffer.from(JSON.stringify({ r }));
            const pCall3 = ch.publish.getCall(0);
            const prop3 = pCall3.args[3];
            prop3.headers = { code: 1 };
            ch.consume.getCall(0).args[1]({ content: errContent, properties: prop3 });
            yield pResult3
                .then((result) => {
                t.notOk(true, 'On error can not execute then');
            })
                .catch((err) => {
                t.ok(err instanceof request_1.RPCError, 'The error is an instance of RPCError');
                t.deepEquals(err.message, JSON.stringify({ r }), 'On error get the expected error message');
                t.ok(ch.deleteQueue.calledOnce, 'Deletes the queue on message on message rejected');
                t.ok(ch.ack.calledOnce, 'Acknowledges the message reception on message rejection');
            });
        });
    }
    test()
        .then(() => t.end())
        .catch(console.error);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWVzdC5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FtcXAvcmVxdWVzdC5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSw2QkFBNkI7QUFFN0IsaUNBQWtDO0FBRWxDLHVDQUFtRDtBQUVuRDtJQUNFLE1BQU0sQ0FBQztRQUNMLFdBQVcsRUFBRSxZQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBQyxLQUFLLEVBQUUsTUFBTSxFQUFDLENBQUM7UUFDNUMsT0FBTyxFQUFFLFdBQUcsRUFBRTtRQUNkLFdBQVcsRUFBRSxXQUFHLEVBQUU7UUFDbEIsR0FBRyxFQUFFLFdBQUcsRUFBRTtRQUNWLE9BQU8sRUFBRSxXQUFHLEVBQUU7UUFDZCxXQUFXLEVBQUUsWUFBSSxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztLQUMvQyxDQUFDO0FBQ0osQ0FBQztBQUVEO0lBQ0UsTUFBTSxDQUFDO1FBQ0wsS0FBSyxFQUFFLFlBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDekIsU0FBUyxFQUFFLFlBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQzdDLENBQUM7QUFDSixDQUFDO0FBRUQsY0FBYyxJQUFZO0lBQ3hCLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBTyxDQUFDLE9BQU8sRUFBRSxNQUFNO1FBQ3ZDLFVBQVUsQ0FBQyxNQUFNLE9BQU8sRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3BDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFPO0lBRTNCLE1BQU0sRUFBRSxHQUFHLFdBQVcsRUFBRSxDQUFDO0lBQ3pCLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUVwQjs7WUFDRSxNQUFNLGFBQWEsR0FBRyxzQkFBWSxD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