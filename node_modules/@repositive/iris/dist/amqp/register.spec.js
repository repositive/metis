"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const test = require("tape");
const sinon_1 = require("sinon");
const register_1 = require("./register");
function mockChannel() {
    return {
        assertExchange: sinon_1.spy(),
        assertQueue: sinon_1.spy(),
        prefetch: sinon_1.spy(),
        bindQueue: sinon_1.spy(),
        consume: sinon_1.spy(),
        sendToQueue: sinon_1.spy(),
        ack: sinon_1.spy()
    };
}
function mockSerialization() {
    return {
        parse: sinon_1.stub().returns({}),
        serialize: sinon_1.stub().returns(Buffer.from('{}'))
    };
}
function fakeMessage() {
    return {
        content: Buffer.from('{}'),
        properties: {
            replyTo: 'any-queue',
            correlationId: 'unique',
            headers: { code: 0 }
        }
    };
}
const libOptions = {
    url: 'amqp://rabbit',
    exchange: 'rpc_exchange',
    queue: 'test'
};
function wait(time) {
    return new Promise((resolve, reject) => {
        setTimeout(() => resolve(), time);
    });
}
test('Everything goes well in register function', (t) => {
    const ch = mockChannel();
    const expectedResponse = Buffer.from('{}');
    const handler = sinon_1.stub().returns(Promise.resolve(expectedResponse));
    function test() {
        return __awaiter(this, void 0, void 0, function* () {
            const args = Object.assign({}, libOptions, { ch });
            const register = yield register_1.setupRegister(args);
            t.equals(typeof register, 'function', 'setupAdd returns the register function');
            t.ok(ch.assertExchange.calledOnce, 'A new exchange is created if none exists');
            const exCall = ch.assertExchange.getCall(0);
            t.equals(exCall.args[0], libOptions.exchange, 'The exchange used is the one provided in the lib options');
            t.equals(exCall.args[1], 'topic', 'The exchange provided is of type "topic"');
            const pattern = 'simple.test.works';
            yield register({ pattern, handler });
            t.ok(ch.assertQueue.calledOnce, 'A new queue is created for the functionality');
            t.ok(ch.assertQueue.getCall(0).args[0].indexOf(pattern) > -1, 'The queue name contains the name of the pattern');
            t.ok(ch.bindQueue.calledOnce, 'The queue is binded to the exchange');
            const bindCall = ch.bindQueue.getCall(0);
            t.ok(bindCall.args[0].indexOf(pattern) > -1, 'The queue binded is the created for this functionality');
            t.equals(bindCall.args[1], libOptions.exchange, 'It binds the queue to the configured exchange');
            t.ok(ch.consume.calledOnce, 'It starts consuming the queue');
            const consumeCall = ch.consume.getCall(0);
            t.ok(consumeCall.args[0].indexOf(pattern) > -1, 'The queue consumed is the specific of this service');
            const consumer = consumeCall.args[1];
            const message = fakeMessage();
            yield consumer(message);
            t.ok(handler.calledOnce, 'The implemented function is called on message');
            t.deepEquals(handler.getCall(0).args[0], { payload: message.content }, 'The implementation is called with the message content');
            t.ok(ch.sendToQueue.calledOnce, 'The library pipes the response to request service');
            const sendCall = ch.sendToQueue.getCall(0);
            t.equals(sendCall.args[0], message.properties.replyTo, 'It replies to the requested queue');
            t.deepEquals(sendCall.args[1], expectedResponse, 'It puts to the queue the response from the implementation');
            t.equals(sendCall.args[2].correlationId, message.properties.correlationId, 'It adds the correlation id received from the message');
            t.ok(ch.ack.calledOnce, 'ACK is being called');
            t.equals(ch.ack.getCall(0).args[0], message, 'ACK is being called with the original message');
        });
    }
    test().then(() => t.end());
});
test('Not everything goes well in register function', (t) => {
    const ch = mockChannel();
    const expectedResponse = Buffer.from('{}');
    const errorResponse = Buffer.from('{"error":"Unexpected error"}');
    function test() {
        return __awaiter(this, void 0, void 0, function* () {
            const pattern = 'simple.test.fails';
            const register = yield register_1.setupRegister(Object.assign({}, libOptions, { ch }));
            const handler = () => {
                throw new Error();
            };
            yield register({ pattern, handler });
            const consumer = ch.consume.getCall(0).args[1];
            const message = fakeMessage();
            yield consumer(message);
            t.ok(ch.ack.calledOnce, 'ACK is being called');
            t.equals(ch.ack.getCall(0).args[0], message, 'ACK is being called with the original message.');
            t.ok(ch.sendToQueue.calledOnce, 'Sends error reply');
            t.equals(ch.sendToQueue.getCall(0).args[0], message.properties.replyTo, '2nd message goes back to the sender');
            t.deepEquals(ch.sendToQueue.getCall(0).args[1].toString(), errorResponse.toString(), '2nd message is an error message.');
        });
    }
    test()
        .then(() => t.end())
        .catch(console.error);
});
test('Not everything goes well in add function Custom', (t) => {
    const ch = mockChannel();
    const expectedResponse = Buffer.from('{}');
    const customErrorResponse = Buffer.from('{"error":"Custom"}');
    function test() {
        return __awaiter(this, void 0, void 0, function* () {
            const pattern = 'simple.test.fails';
            const register = yield register_1.setupRegister(Object.assign({}, libOptions, { ch }));
            const handler = () => Promise.reject(new Error('Custom'));
            yield register({ pattern, handler });
            const consumer = ch.consume.getCall(0).args[1];
            const message = fakeMessage();
            yield consumer(message);
            // Error with Custom message
            t.deepEquals(ch.sendToQueue.getCall(0).args[1].toString(), customErrorResponse.toString(), 'Custom message has a custom content.');
        });
    }
    test().then(() => t.end());
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXIuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hbXFwL3JlZ2lzdGVyLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLDZCQUE2QjtBQUU3QixpQ0FBa0M7QUFDbEMseUNBQTJDO0FBRzNDO0lBQ0UsTUFBTSxDQUFDO1FBQ0wsY0FBYyxFQUFFLFdBQUcsRUFBRTtRQUNyQixXQUFXLEVBQUUsV0FBRyxFQUFFO1FBQ2xCLFFBQVEsRUFBRSxXQUFHLEVBQUU7UUFDZixTQUFTLEVBQUUsV0FBRyxFQUFFO1FBQ2hCLE9BQU8sRUFBRSxXQUFHLEVBQUU7UUFDZCxXQUFXLEVBQUUsV0FBRyxFQUFFO1FBQ2xCLEdBQUcsRUFBRSxXQUFHLEVBQUU7S0FDWCxDQUFDO0FBQ0osQ0FBQztBQUVEO0lBQ0UsTUFBTSxDQUFDO1FBQ0wsS0FBSyxFQUFFLFlBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDekIsU0FBUyxFQUFFLFlBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQzdDLENBQUM7QUFDSixDQUFDO0FBRUQ7SUFDRSxNQUFNLENBQUM7UUFDTCxPQUFPLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDMUIsVUFBVSxFQUFFO1lBQ1YsT0FBTyxFQUFFLFdBQVc7WUFDcEIsYUFBYSxFQUFFLFFBQVE7WUFDdkIsT0FBTyxFQUFFLEVBQUMsSUFBSSxFQUFFLENBQUMsRUFBQztTQUNuQjtLQUNGLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxVQUFVLEdBQUc7SUFDakIsR0FBRyxFQUFFLGVBQWU7SUFDcEIsUUFBUSxFQUFFLGNBQWM7SUFDeEIsS0FBSyxFQUFFLE1BQU07Q0FDZCxDQUFDO0FBRUYsY0FBYyxJQUFZO0lBQ3hCLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBTyxDQUFDLE9BQU8sRUFB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