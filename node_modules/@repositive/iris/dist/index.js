"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const amqp_1 = require("./amqp");
const serialization_1 = require("./serialization");
const ramda_1 = require("ramda");
exports.IrisAMQP = amqp_1.default;
exports.toPromise = ramda_1.curry(function toPromise(f, val) {
    return Promise.resolve(f(val));
});
const lensPayload = ramda_1.lensProp('payload');
const lensHandler = ramda_1.lensProp('handler');
const serializePayload = exports.toPromise(ramda_1.over(lensPayload, serialization_1.serialize));
const parsePayload = exports.toPromise(ramda_1.over(lensPayload, serialization_1.parse));
const serializeP = exports.toPromise(serialization_1.serialize);
const transformHandler = exports.toPromise(ramda_1.over(lensHandler, (handler) => ramda_1.pipeP(parsePayload, handler, serializeP)));
function default_1(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const __IrisAMQP = opts._IrisAMQP || exports.IrisAMQP;
        const backend = yield __IrisAMQP(opts);
        const request = ramda_1.pipeP(serializePayload, backend.request, serialization_1.parse);
        const register = ramda_1.pipeP(transformHandler, backend.register);
        return {
            request,
            register
        };
    });
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLGlDQUErQjtBQUUvQixtREFBaUQ7QUFDakQsaUNBQW1EO0FBRXRDLFFBQUEsUUFBUSxHQUFHLGNBQVMsQ0FBQztBQUdyQixRQUFBLFNBQVMsR0FBRyxhQUFLLENBQUMsbUJBQXlCLENBQVcsRUFBRSxHQUFNO0lBQ3pFLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ2pDLENBQUMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxXQUFXLEdBQUcsZ0JBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN4QyxNQUFNLFdBQVcsR0FBRyxnQkFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3hDLE1BQU0sZ0JBQWdCLEdBQUcsaUJBQVMsQ0FBQyxZQUFJLENBQUMsV0FBVyxFQUFFLHlCQUFTLENBQUMsQ0FBQyxDQUFDO0FBQ2pFLE1BQU0sWUFBWSxHQUFHLGlCQUFTLENBQUMsWUFBSSxDQUFDLFdBQVcsRUFBRSxxQkFBSyxDQUFDLENBQUMsQ0FBQztBQUV6RCxNQUFNLFVBQVUsR0FBRyxpQkFBUyxDQUFDLHlCQUFTLENBQUMsQ0FBQztBQUV4QyxNQUFNLGdCQUFnQixHQUFHLGlCQUFTLENBQUMsWUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLE9BQU8sS0FBSyxhQUFLLENBQUMsWUFBWSxFQUFFLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFN0csbUJBQThCLElBRTVCOztRQUNBLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLElBQUksZ0JBQVEsQ0FBQztRQUU5QyxNQUFNLE9BQU8sR0FBRyxNQUFNLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQVN2QyxNQUFNLE9BQU8sR0FBb0QsYUFBSyxDQUNwRSxnQkFBZ0IsRUFDaEIsT0FBTyxDQUFDLE9BQU8sRUFDZixxQkFBSyxDQUNOLENBQUM7UUFFRixNQUFNLFFBQVEsR0FBcUQsYUFBSyxDQUN0RSxnQkFBZ0IsRUFDaEIsT0FBTyxDQUFDLFFBQVEsQ0FDakIsQ0FBQztRQUVGLE1BQU0sQ0FBQztZQUNMLE9BQU87WUFDUCxRQUFRO1NBQ1QsQ0FBQztJQUNKLENBQUM7Q0FBQTtBQTdCRCw0QkE2QkMifQ==